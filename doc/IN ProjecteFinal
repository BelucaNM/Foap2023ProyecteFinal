
Tienda. ObJEtivos                                                                           
 

Créditos/Copyright  
Todo el contenido de este documento de memoria, así como el código fuente y la aplicación 
desarrollada en ocasión de este proyecto serán sujetos a una  licencia de Creative Commons 
 


  
Índice  
1. Introducción .
2. Descripción . 
3. Objetivos .  
4. Arquitectura de la aplicación. 
4.1.Base de datos .  
4.2 Aplicación back-end .  
4.3 Aplicación front-end .
4.4 Despliegue . 
5. Plataforma de desarrollo .
6. Diagrama de uso y relación de módulos y sus funciónes.
7. Views
8. Clases
9. Perfiles de usuario .


15. Usabilidad/UX . 50 
16. Seguridad . 53 
17. Tests . 55 
18. Versiones de la aplicación/servicio. 56 
19. Requisitos de instalación/implantación/uso . 57 
20. Instrucciones de implantación . 58 
21. Instrucciones de desarrollo . 59 
21.1 Aplicación Backend . 59 
21.2 Aplicación Frontend . 60 
22. Bugs . 61 
23. Proyección a futuro . 62 
24. Presupuesto . 63 
25. Análisis de mercado. 64 
26. Marketing y Ventas . 65 
26.1. Métricas de la aplicación . 66 
27. Conclusiones. 68 
Anexo 1. Entregables del proyecto . 70 
Anexo 2. Libro de estilo . 71 

 

1- Introduccion
En este proyecto se ha realizado una aplicación  'ObJEtivos', desde la definición de la estructura 
de datos hasta la aplicación cliente pasando por la aplicación backend. La  aplicación es requisito para la superacion del curso Foap2023
 
La  realización  de  este  proyecto  también supone  una  oportunidad en mi caso  para  desarrollar  una  aplicación 
de uso propio para el inventariado y la venta de material de fotografía. 
 

2- Descripción 
En este Proyecto de final de curso se propone la implementacio de una aplicación para una una tienda .

Desde el punto de vista técnico, para la elaboración de la base de datos se ha optado por el uso de 
MariaDB; para la concepción de la aplicación backEnd o de servidor se ha usado PHP y la aplicación frontEnd se ha construido con las premisas de mobile-first y usando el framework 
HTML, CSS, y  JavaScript. Aunque en algunos programas se  generan las vistas HTML, en forma de tablas,  que enviaba al cliente desde el servidor. 

 
Para  codificar  esta  aplicación  se  ha  optado  por  un  modelo Vista-Modelo-Controlador desarrollado en OOP, que permite separar mejor las diferentes responsabilidades de cada 
parte  de  la  aplicación  (la  parte vista  presenta  la  información  mientras  que  la  parte 
servidor  gestiona  la  información  y  la  procesa) .


 

   
3. Objetivos y pasos a seguir.

Laos  objetivos    que  se  persiguen  en  este  proyecto  y  que 
deben completarse necesariamente al final del proyecto. 
• Analizar e identificar las entidades  y las necesidades que la aplicación debe resolver. 
• Diseñar  y  realizar  una  aplicación  backend  con  la  lógica  necesaria  para  responder  al  uso para los que esta aplicación está pensada. 
• Diseñar  y  desplegar  una  aplicación  frontend  para  consumir  los  servicios  ofrecidos  por  la 
aplicación backend.   
• Aplicar en lo posible los conocimientos de diseño de interfaces web adquiridos en este curso. 
• Integración de la aplicación con servicios de mensajería de terceros para el 
envió de notificaciones en tiempo real. 
• API de terceros. Integración de la aplicación con APIs de terceros
• Aplicación  de  pruebas  unitarias  y  funcionales  para  asegurar  el  funcionamiento 
deseado de las partes de las aplicaciones. 
    
El  producto  final  de  esta  aplicación  es  un  conjunto  de  ficheros  HTML, PHP,  CSS  y  JS  que  deben  ser 
alojados en un servidor Apache.



4.1 La base de datos

La base de datos tiene tres tablas para datos fijos de la aplicación, que son las tiendas, los vendedores y las tablas de codigos postales de los municipios.
Una pequeña aplicacion "webAdmin" se ha desarrollado para mantenimiento estos datos por parte de un administrador de la aplicacion web.
A traves de esta aplicacion se mantiene también la tabla de productos, que almacena los datos de los productos a la venta y una pequeña  tabla de categorias de productos.

El resto de las tablas es como sigue:
- La tabla de usuarios, que almacena los datos de los usuarios que se registran para el uso de la applicacion,
- La tabla de pedidos, que almacena los datos de cabecera de los pedidos realizados por los usuarios,
- La tabla de lineas de pedido, que almacena los detalles de los pedidos,
- La tabla de carrito, que almacena el carrito temporal creado para el usuario mientras realiza la compra,
- La tabla de lineas de carrito , que almacena el contenido del carrito, y
- La tabla de axistencias, que almacena los datos de stock  de los productos.


Se incluye un diagrama completo de la BD con las tablas y sus tributos y las relaciones entre tablas.

4.2  Aplicación back-end
En  lo  concerniente  al  patrón  de  arquitectura  seguido  para  construir  la  aplicación  backend,  se  ha 
tomado como referencia el modelo de arquitectura vista-modelo-controlador sobre PHP.
 
Se ha seguido este patrón con algunas licencias para dar cabida a algunas necesidades de la aplicación. 

4.3 Aplicación front-end

La parte font-end de la aplicación se ha desarrollado en HTML, CSS y JavaScript. 
Por cuestiones de disponibilidad de tiempo se ha utilizado en algunas pantallas Bootstrap (librería OpenSourde de componentes CSS y JS). 

4.4 Despliegue 
 
Como se ha comentado en apartados, el despliegue es una parte importante del desarrollo de la 
aplicación, puesto que se pretende crear una aplicación que sea fácilmente desplegable y escalable, 
en caso de ser necesario.?? 
  
5  Entorno de desarrollo
Ordenadores personales de aula y propio, en entorno Windows 10 y sobre plataforma XAMP, con servidor Apache local.
Para  la  edición de código se ha utilizado Visual Studio Code.
Para crear los modelos de DB se ha utilizado PHPMyAdmin y MYSQLWorkbech 8.0. 
El tiempo de desarrollo a sido de tres semanas.
El codigo se almacena en un repositorio público de GITHUB.


6. Diagrama de uso y relación de módulos y sus funciónes.
 

7 Views. Recursos. Diseño de pantallas e includes

Presentar  pantalla en secciones. Header, barra de navegación
Uso de Carosel para visualización de grupos de producto y fotografias de cada producto.
Uso de  table para visualización de productos en pantalla de productos.
Uso de  table para visualización de pedidos en pantalla de pedidos.
Uso de  table para visualización de tiendas en pantalla de tiendas. Explicaci´on
Uso de iconos

 

8. Clases
Se usa el modelo de extensión de clases desde el modelo conexión, es decir partiendo de esta como clase padre, definiendo como extensión la clase que incluye todas los procedimientos de acceso a datos en BD y 
finalmente la clase controlador, donde se hacen las verificaciones antes del acceso a datsos y también la entrega de la salida. 
Por eso no hay una correspondencia exacta en el uso de clases y tablas, quiero decir que por ejemplo el controlador de pedido suministra igualmente la cabecera de pedido y las lineas
Todos las clases se inicializan via el controlador y se todas los datos se guarda en los atributos de manera que las llamadas entre funciones, en lo posible, no tienen argumento
Aunque pueda considerarse que los métodos  getters 
y setters en las clases son redundantes  yo los uso

 
 
9. Perfiles de usuario 
Todos los usuarios que se registran en la aplicación y que pueden 
realizar las acciones habituales previstas en la aplicación son Usuarios sin privilegios. 
Los Usuarios Administradores trabajan sobre otra aplicación  ( mantenimiento de datos)
Todos los usuarios son propios. Se considera un usuario propio a aquel que se ha registrado mediante 
el formulario de registro de usuarios en la aplicación. 
  

 
15. Usabilidad/UX 
La aplicación se ha diseñado para ser fácil de usar y comprender.

La realización de la aplicación frontend no se ha inspirado de los principios del Mobile 
First.  Para convertir a un diseño donde se prioricen  los dispositivos móviles habría que usar  de patrones de diseño de  interfaces (como el uso de cards Y modales) que se muestre sin problemas y sin que se tengan 
que realizar grandes cambios en dispositivos.  
 
En términos prácticos, la aplicación de este principio significa, por ejemplo, que cuando se codifica 
el comportamiento de un componente para diferentes medidas de pantalla, primero se codifica el 
comportamiento en pantallas pequeñas (por defecto) y luego se introducen las modificaciones 
necesarias a medida que el tamaño aumenta. No al revés.  
 
Este principio de diseño supone una evolución del conocido como Responsive Design y, por ello 
mantiene sus premisas de adaptar el contenido a los diferentes anchos de pantalla de los 
diferentes dispositivos, desde pantallas anchas hasta las pantallas de los smartphones. 
 
En  relación con  la  información mostrada  en  la  página  principal de  la aplicación,  se intenta mantener la interfaz simple y entendible para el usuario.  
 

 
En relación con los principios de diseño de interfaces aplicados en el diseño de la aplicación, es 
preciso destacar los siguientes: 
 
• Cards. En la página principal de la aplicación, la información de las diferentes productos se 
agrupa de forma lógica en tarjetas o Cards que se muestran agrupadas en una fila (el número 
de tarjetas por fila varía en función del ancho de la pantalla) y que permiten acceder al detalle 
de la mascota y declarar una acción sobre esa mascota. 
                                                                                           
• Modals El uso de modales permite atraer toda la atención del usuario hacia un contenido 
determinado que se muestra superpuesto al contenido previo. El contenido de las modales 
debe,  además,  reducido  para  que  se  muestre  correctamente  en  los  smartphones.  En  la 
aplicación, se usa esta técnica para recoger información a la hora introducir una acción sobre 
una mascota. 
• Carrousel.  El  uso  de  carrouseles  para  mostrar  imágenes  es  una  técnica  ampliamente 
utilizada que permite, entre otras cosas, temporizar la carga de imágenes a medida que el 
usuario  las  visualiza  para,  de  ese  modo,  reducir  la  cantidad  de  imágenes  descargadas 
cuando, por ejemplo, el usuario no visualiza más que la primera imagen. 
 
En relación con el diseño de la navegación en la aplicación se ha pensado en dos formas distintas 
de  navegación  en  función  del  ancho  de  la  pantalla  para  maximizar  la  usabilidad  de  la  aplicación 
tanto en grandes dispositivos como en smartphones. 
 
• Horizontal menu. En el caso de las grandes pantallas, la aplicación se muestra 
con un menú horizontal de navegación que se encuentra en la parte superior de la aplicación. 
Se trata de un menú simple que ocupa todo el ancho de la pantalla y que contiene  
enlaces  directos.  

 
Por último, en lo concerniente a los formularios, también se han aplicado varios principios y 
patrones de diseño de interfaces. 
 
• Password  Strength  Meter.  En  la  página  de  registro  se  ha  introducido  un  medidor  de 
seguridad de la contraseña introducido por el usuario. Este principio tiene por objetivo que 
el usuario introduzca contraseñas más robustas y seguras frente a un ataque. 
                                                                                        
• Fill in the Blanks. Este principio hace referencia a la gestión de los inputs cuando estos se 
muestran vacíos. En el diseño de la aplicación se ha previsto el uso de valores existentes 
para  alimentar  los  campos  de  un  formulario  cuando  el  usuario  este  actualizando  o 
modificando la información, así como el uso de  placeholders en aquellos casos en que se 
trata de añadir nueva información al sistema. 

                                                                                         
 

 
16. Seguridad 
El esquema de seguridad aplicado en la aplicación PetFinder tiene varias capas que se superponen 
y que persiguen dos objetivos; por un lado, aislar la aplicación y los sistemas con los que interactúa 
para reducir al máximo el riesgo de intrusión (por ejemplo, el riesgo de intrusión directa en el servidor 
de base de datos) y, por otro lado, proteger el flujo de datos servidos por la API para prevenir en 
este punto el robo de información de clientes. 
 
Mencionar el uso de sentencias prepare y ?
Mencionar el uso de "selecion de caracteres en los campos de entrada para evitar comandos"
Mencionar el uso de password encriptadas
Mencionar uso de sesiones , el servidor conserva informacion del usuario en la sesiones
Uso de token para verificaicón de cuenta de email y activacion de cuenta , y para el cambio de la contraseña 

 
17. Tests DE FUNCIONALIDAD Y CALIDAD  ??? revisar 

Getión de Errores, Try and catch

librerias domppdf para generacion de PDF 
PHPmailer para mensajes en tiempo real

He realizado pruebas de uso en navegadores
Google Chrome,  Y Mozilla Firefox Developer Edition.
 
Asegura la accesibilidad usando un elemento <nav> en barra de navegacion para identificarla a los usuarios de asistencias
 
 
                                                                                        
 

 
20. Instrucciones de implantación  ??? rellenar cuando se haga 
La instalación de la aplicación en un servidor que cumpla con los requisitos es rápida y sencilla. 

Por último, la calidad es el último de los objetivos secundarios y, a la vez, es el punto del que estoy 
menos  satisfecho.  Aunque  se  puede  afirmar  que  la  aplicación  funciona  y no  presenta  problemas 
destacables (al menos hasta la fecha), el hecho de que no se hayan implementado tests para la 
mayor  parte  del  código  y  las  funcionalidades  que  la  aplicación  ofrece,  hace  que  la  calidad  de  la 
aplicación, sobre todo de cara futuras evoluciones, no sea muy buena. 
 
Me  hubiera gustado concebir  una  aplicación con  las pruebas  implementadas mediante el  uso  de 
metodologías como TDD (Test Driven Development) en que el proceso de desarrollo es “pilotado” 
desde  la  clase  de  prueba,  o  DDD  (Domain  Driven  Development)  en  que  se  sitúa  a  los  dominios 
como el centro integral de la lógica de la aplicación y se generan tests para los casos de uso. 
 
                                                                                     
 

 
Anexo 1. Entregables del proyecto 
A continuación, se indican los entregables que se presentan junto con esta documentación y que contienen 
el código de las aplicaciones
 
• Foap2023ProyecteFinal. Es una carpeta que contiene el repositorio  con el código de la aplicación 
 

 
La aplicación producto de este proyecto se encuentra desplegada en la dirección 
( poner aqui cuando haya sido subida al servidor)

Anexo 2. Libro de estilo 
Como  se  ha  explicado  en  apartados  anteriores,  el  diseño  de la aplicacion   se 
apoya fuertemente en el uso y la personalización delBootstrap 4.  A 
continuación,  se  incluye  la  hoja  de  estilos  con  las  personalizaciones  de  Bootstrap  para 
la tienda. (style.scss) 
 
 
 
 
  

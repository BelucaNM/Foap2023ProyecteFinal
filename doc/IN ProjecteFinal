
Tienda. ObJEtivos                                                                           
 

Créditos/Copyright  
Todo el contenido de este documento de memoria, así como el código fuente y la aplicación 
desarrollada en ocasión de este proyecto serán sujetos a una  licencia de Creative Commons 
 


  
Índice  
1. Introducción .
2. Descripción . 
3. Objetivos .  
4. Arquitectura de la aplicación. 
4.1.Base de datos .  
4.2 Aplicación back-end .  
4.3 Aplicación front-end .
4.4 Despliegue . 
5. Plataforma de desarrollo .
6. Diagrama de uso y relación de módulos y sus funciónes.
7. Views
8. Clases
9. Perfiles de usuario .
10.Requisitos de instalación/implantación/uso 
11. Usabilidad y accesibilidad.
12. Seguridad . 
13. Funcionalidad de la aplicación.
14. Instrucciones de implantación.
15. Proyección a futuro .
16. Entregables del proyecto  
 

 

1- Introduccion
En este proyecto se ha realizado una aplicación  'ObJEtivos', desde la definición de la estructura 
de datos hasta la aplicación cliente pasando por la aplicación backend. La  aplicación es requisito para la superacion del curso Foap2023
 
La  realización  de  este  proyecto  también supone  una  oportunidad en mi caso  para  desarrollar  una  aplicación de uso propio para el inventariado y la venta de material de fotografía de segunda mano. 
 

2- Descripción 
En este Proyecto de final de curso se propone la implementacio de una aplicación para una una tienda .

Desde el punto de vista técnico, para la elaboración de la base de datos se ha optado por el uso de 
MariaDB; para la concepción de la aplicación backEnd o de servidor se ha usado PHP y la aplicación frontEnd se ha construido con las premisas de mobile-first y usando el framework 
HTML, CSS, y  JavaScript. Aunque en algunos programas se  generan las vistas HTML, en forma de tablas,  que enviaba al cliente desde el servidor. 

 
Para  codificar  esta  aplicación  se  ha  optado  por  un  modelo Vista-Modelo-Controlador desarrollado en OOP, que permite separar mejor las diferentes responsabilidades de cada 
parte  de  la  aplicación  (la  parte vista  presenta  la  información  mientras  que  la  parte 
servidor  gestiona  la  información  y  la  procesa) .

Se han usado las librerias Domppdf para generacion de PDF  y PHPmailer para envío de mensajes en tiempo real

   
3. Objetivos y pasos a seguir.

Laos  objetivos    que  se  persiguen  en  este  proyecto  y  que 
deben completarse necesariamente al final del proyecto. 
• Analizar e identificar las entidades  y las necesidades que la aplicación debe resolver. 
• Diseñar  y  realizar  una  aplicación  backend  con  la  lógica  necesaria  para  responder  al  uso para los que esta aplicación está pensada. 
• Diseñar  y  desplegar  una  aplicación  frontend  para  consumir  los  servicios  ofrecidos  por  la 
aplicación backend.   
• Aplicar en lo posible los conocimientos de diseño de interfaces web adquiridos en este curso. 
• Integración de la aplicación con servicios de mensajería de terceros para el 
envió de notificaciones en tiempo real. (Integración de la aplicación con APIs de terceros)
• Aplicación  de  pruebas  unitarias  y  funcionales  para  asegurar  el  funcionamiento 
deseado de las partes de las aplicaciones. 
    
El  producto  final  de  esta  aplicación  es  un  conjunto  de  ficheros  HTML, PHP,  CSS  y  JS  que  deben  ser alojados en un servidor Apache.


4.1 La base de datos

La base de datos tiene tres tablas para datos fijos de la aplicación, que son las tiendas, los vendedores y las tablas de codigos postales de los municipios.
Una pequeña aplicacion "webAdmin" se ha desarrollado para mantenimiento estos datos por parte de un administrador de la aplicacion web.
A traves de esta aplicacion se mantiene también la tabla de productos, que almacena los datos de los productos a la venta y una pequeña  tabla de categorias de productos.

El resto de las tablas es como sigue:
- La tabla de usuarios, que almacena los datos de los usuarios que se registran para el uso de la applicacion,
- La tabla de pedidos, que almacena los datos de cabecera de los pedidos realizados por los usuarios,
- La tabla de lineas de pedido, que almacena los detalles de los pedidos,
- La tabla de carrito, que almacena el carrito temporal creado para el usuario mientras realiza la compra,
- La tabla de lineas de carrito , que almacena el contenido del carrito, y
- La tabla de axistencias, que almacena los datos de stock  de los productos.

Se incluye un diagrama completo de la BD con las tablas y sus tributos y las relaciones entre tablas.

4.2  Aplicación back-end

En  lo  concerniente  al  patrón  de  arquitectura  seguido  para  construir  la  aplicación  backend,  se  ha 
tomado como referencia el modelo de arquitectura vista-modelo-controlador sobre PHP.
 
Se ha seguido este patrón con algunas licencias para dar cabida a algunas necesidades de la aplicación. 

4.3 Aplicación front-end

La parte font-end de la aplicación se ha desarrollado en HTML, CSS y JavaScript. 
Por cuestiones de disponibilidad de tiempo se ha utilizado en algunas pantallas Bootstrap (librería OpenSourde de componentes CSS y JS). 

4.4 Despliegue 
 
Como se ha comentado en apartados, el despliegue es una parte importante del desarrollo de la 
aplicación, puesto que se pretende crear una aplicación que sea fácilmente desplegable y escalable, 
en caso de ser necesario. 
  
5  Entorno de desarrollo

La aplicación se ha desarrollado en ordenadores personales de aula y propio, en entorno Windows 10 y sobre plataforma XAMPP, con servidor Apache local.
Para  la  edición de código se ha utilizado Visual Studio Code.
Para crear los modelos de DB se ha utilizado PHPMyAdmin y MYSQLWorkbech 8.0. 
El tiempo de desarrollo ha sido de cuatro semanas.
El codigo se almacena en un repositorio público de GITHUB.


6. Diagrama de uso y relación de módulos y sus funciónes.
 


7 Views. Recursos. Diseño de pantallas e includes

Presentar  pantalla en secciones. Header, barra de navegación
Uso de Carosel para visualización de grupos de producto y fotografias de cada producto.
Uso de  table para visualización de productos en pantalla de productos.
Uso de  table para visualización de pedidos en pantalla de pedidos.
Uso de  table para visualización de tiendas en pantalla de tiendas. Explicaci´on
Uso de iconos

 

8. Clases

Se ha usado  el modelo de extensión de clases desde el modelo conexión, es decir partiendo de esta como clase padre, definiendo como extensión la clase que incluye todas los procedimientos de acceso a datos en BD y 
finalmente la clase controlador, donde se hacen las verificaciones antes del acceso a datsos y también la entrega de la salida. 
Por eso no hay una correspondencia exacta en el uso de clases y tablas, quiero decir que por ejemplo el controlador de pedido suministra igualmente la cabecera de pedido y las lineas
Todos las clases se inicializan via el controlador y se todas los datos se guarda en los atributos de manera que las llamadas entre funciones, en lo posible, no tienen argumento
Aunque pueda considerarse que los métodos  getters 
y setters en las clases son redundantes  yo los uso

 
 
9. Perfiles de usuario 

Todos los usuarios que se registran en la aplicación y que pueden 
realizar las acciones habituales previstas en la aplicación son Usuarios sin privilegios. 
Los usuarios administradores trabajan sobre otra aplicación WebAdmin ( para mantenimiento de datos)
Todos los usuarios de la plicación son propios. Se considera un usuario propio a aquel que se ha registrado mediante el formulario de registro de usuarios en la aplicación. 
  

10 Requisitos de instalación/implantación/uso

Las direcciones de llamadas entre los programas son relativas al directorio raiz de instalacción en ambos entornos, de desarrollo y de implantación.
Se definen algunas   variables en funcion del entorno que se detecta via PHP y OS.php. El entorno de desarrollo es Windows, y el entorno de 
producción es Linux. Se verifica la conexión a la base de datos según el entorno detectado asi como 


11. Usabilidad y accesibilidad

La aplicación se ha diseñado para ser fácil de usar y comprender.

Dado el objetivo de la aplicación ( venta de material de fotografía de segunda mano ) la realización de la aplicación frontend no se ha inspirado de los principios del Mobile 
First, pero  aunque se usan  de patrones de diseño de  interfaces (como el uso de cards y modales) que hacen pensar que no habrá que realizar grandes cambios en dispositivos.  Pero si intenta ser responsive y adaptable a diferentes tamaños de pantalla.

 
En  relación con  la  información mostrada  en  la  página  principal de  la aplicación,  se intenta mantener la interfaz simple y entendible para el usuario.  
 
En relación con los principios de diseño de interfaces aplicados en el diseño de la aplicación, es 
preciso destacar los siguientes: 

En relación con el diseño de la navegación se ha hecho a traves de 
con un menú horizontal común a todos los programas que se encuentra en la parte superior de la aplicación. 
Se trata de un menú simple que ocupa todo el ancho de la pantalla y que contiene  
enlaces  directos. Los enlaces se activan o desactivan en función del programa que se está ejecutando, y el estado de sesión iniciada ( parte privada de la aplicación )  o no ( parte pública).

 
• Cards. En la página principal de la aplicación, la información de las diferentes categorías de productos se 
agrupa de forma lógica en tarjetas o Cards que se muestran agrupadas en una fila. El número 
de tarjetas por fila es de 4 y se permite movimiento entre categorías a traves de un carrusel.
El  uso  del  carrousel para  mostrar  imágenes  permite, entre otras cosas, reducir  la  cantidad  de  imágenes  descargadas.Al seleccionar una tarjeta se muestra en formato table los productos de la categoria.  

                                                                                           
• Modals El uso de modales permite atraer toda la atención del usuario hacia un contenido 
determinado que se muestra superpuesto al contenido previo. Los modales se utilizan para mostrar información como alternativa a los cards y forzar que se haya visto dado que el usuario tiene que cerrar el modal. Tambien para la confirmación/cancelación  de operaciones de borrado. 
 
Por último, en lo concerniente a los formularios, también se han aplicado varios principios y 
patrones de diseño de interfaces. 
                                                                                        
• Relleno de campos. Este principio hace referencia a la gestión de los inputs cuando estos se 
muestran vacíos. En el diseño de la aplicación se ha previsto el uso de valores existentes 
para  alimentar  los  campos  de  un  formulario  cuando  el  usuario  este  actualizando  o 
modificando la información, así como el uso de  placeholders en aquellos casos en que se 
trata de añadir nueva información al sistema. 

• Password  y nombre de usuario.  En  la  página  de  registro se imponen unas condiciones para la validación  del nombre de usuario y la palabra de paso, siendo estas un número mínimo de 7 caracteres, con una mayúscula, una minúscula , un número y un carácter especial. Además, se aplica la técnica de confirmación de
seguridad de la contraseña introducido por el usuario. El objetivo que 
el usuario introduzca palabras  más robustas y seguras frente a un ataque. 
Para garantizar que la contraseña introducida por el usuario es correcta el sistema solicita la confirmación de la contraseña. (No está implementado en la primera version pero se prodría introducir facilmente un display de medida de robustez de la  contraseña para información de usuario.) 

• Dirección de email.  El sistema pide en registro una dirección de correo. Esta dirección debe ser única en la base de datos. 

Se han tenido en cuenta las indicaciones de  la accesibilidad usando un elemento <nav> en barra de navegacion para identificarla a los usuarios. También se han respetado los etiquetados de categorias de heading.


12. Seguridad 

El objetivo de un esquema de seguridad es aislar una aplicación para reducir al máximo el riesgo de intrusión en el servidor de base de datos y proteger la información. 

Las medidas tomadas son :

El acceso a la parte privada que implica uso de datos se realiza mendiante sesiones y el servidor conserva informacion del usuario durante la sesión .

Todas las entradas se validan dos  veces, una en el lado del cliente en JavaScript  y otra en el lado del servidor.

Todas las entradas son filtradas en los campos de entrada eliminando caracteres HTML.

La password se encripta.

Todos los accesos a base de datos se hacen mediante las sentencias "prepare" y "execute" con el uso de values '?'.

Cuando un usuario se registra, la nueva cuenta se crea desactivada. Asi el usuario recibe en la cuenta de email que indica , un link de activación con un token. Mediante esta operación se verifica  que  la cuenta de email existe. El mismo procedimiento se utiliza para el cambio de la contraseña. 



13. Pruebas de funcionalidad de la aplicación

Se han realizado pruebas de uso en los navegadores Google Chrome y Mozilla Firefox.

Se ha intentado controlar al máximo la gestión de errores de ejecución de comandos de BD con el uso de las instrucciones "Try" y "catch" para evitar errores fatales que interrumpa la ejecución del programa. 

  
14. Instrucciones de implantación  

La instalación de la aplicación en el servidor es rápida y sencilla. 

15. Proyección a futuro .
                                                                                     
La aplicación  puede ser ampliada con varias funcionalidades. 
La primera será la ampliación de la información asociada a cada producto. También la incorporación de 6 imagenes mínimo a la informaciín de cada producto.
También será necesaria incorporar acceso a una pasarela de pago. 

 
16. Entregables del proyecto 

A continuación, se indican los entregables que se presentan junto con esta documentación y que contienen 
el código de las aplicaciones


Foap2023ProyecteFinal.zip . Es una fichero zip que contiene el código de la aplicación  y también un archivo de configuración de la base de datos que se subirá al Moodle de Sarti. Incluye documentación del proyecto, el diagrama de la aplicación y el diagrama de la estructura de datos .

Existe una un repositorio  GIT pública de  la  aplicación  
 
La aplicación producto de este proyecto se encuentra desplegada en la dirección 
( poner aqui cuando haya sido subida al servidor)


 
 Entregables del proyecto 
A continuación, se indican los entregables que se presentan junto con esta memoria y que contienen 
el código de las aplicaciones, así como el mecanismo de despliegue de PetFinder mediante Docker 
Compose. 
 
• petfinder-back. Es una carpeta que contiene el repositorio GIT con el código de la aplicación 
backend de PetFinder. Contiene la lógica de la aplicación, la capa de acceso a base de datos 
y los servicios expuestos en la API. 
• petfinder-front.  Una  carpeta  que  contiene  el  repositorio  GIT  de  la  aplicación  frontend  de 
PetFinder creada con Angular. 
• petfinder-deploy.  Se  trata  de  una  carpeta  con  el  script  de  despliegue  de  la  aplicación 
(incluidas sus dependencias) mediante el uso de Docker Compose. 
 
La aplicación producto de este proyecto se encuentra desplegada en la dirección 
https://petfinder.ricardmolinaferret.com/ 
 
 
 
 
 
 
 
 
  

 
 
  
